                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.50)
AC_INIT(italc, 1.0.2.svn20070412, tobydox/at/users/dot/sf/dot/net)
AM_INIT_AUTOMAKE(italc, 1.0.2.svn20070412)
AM_CONFIG_HEADER(config.h)
AX_PREFIX_CONFIG_H([common/include/rfb/rfbconfig.h])



if ! test -z "${prefix}" -o "${prefix}" = "NONE" ; then
	CFLAGS="$CFLAGS -I${prefix}/include"
	CPPFLAGS="$CFLAGS -I${prefix}/include"
	CXXFLAGS="$CXXFLAGS -I${prefix}/include"
	LDFLAGS="$LDFLAGS -L${prefix}/bin"
fi


# Checks for programs.
AC_PROG_CC
AC_PROG_CXX

AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL


EXTRAFLAGS="-g0 -O2 -Wall"
#-floop-optimize2 -fomit-frame-pointer"

if test "x`$CC --version|head -1|cut -d\  -f3|cut -d. -f1`" = "x4" ; then
	EXTRAFLAGS="$EXTRAFLAGS -ftree-vectorize -ftree-loop-linear"
	if test "x`$CC --version|head -1|cut -d\  -f3|cut -d. -f2`" != "x0" ; then
		EXTRAFLAGS="$EXTRAFLAGS -funsafe-loop-optimizations -Wunsafe-loop-optimizations"
	fi	
fi
#if test "x`$CC --version|head -1|cut -d\  -f3|cut -d. -f1`" = "x4" ; then
#	EXTRAFLAGS="$EXTRAFLAGS -ftree-vectorize -funsafe-loop-optimizations -Wunsafe-loop-optimizations -ftree-loop-linear"
#fi
CFLAGS="$CFLAGS $EXTRAFLAGS"
CXXFLAGS="$CXXFLAGS $EXTRAFLAGS"

AH_TEMPLATE(BACKCHANNEL, [Enable BackChannel communication])
AC_ARG_WITH(backchannel,
	[  --without-backchannel	disable backchannel method],
	, [ with_backchannel=yes ])
if test "x$with_backchannel" = "xyes"; then
	AC_DEFINE(BACKCHANNEL)
fi
AH_TEMPLATE(ALLOW24BPP, [Enable 24 bit per pixel in native framebuffer])
AC_ARG_WITH(24bpp,
	[  --without-24bpp	disable 24 bpp framebuffers],
	, [ with_24bpp=yes ])
if test "x$with_24bpp" = "xyes"; then
	AC_DEFINE(ALLOW24BPP)
fi


AH_TEMPLATE(BUILD_LINUX, [Build iTALC for Linux])
AH_TEMPLATE(BUILD_WIN32, [Build iTALC for Win32])
AH_TEMPLATE(WIN32, [Build iTALC for Win32])
AC_ARG_WITH(linux,
	[  --with-linux		explicit build iTALC for Linux], [ build_linux=true ], [ build_linux=false ])
AC_ARG_WITH(win32,
	[  --with-win32		explicit build iTALC for Win32], [ build_win32=true ], [ build_win32=false ])
AC_MSG_CHECKING([platform to build for])
if test "x$build_win32" = "xtrue" ; then
	AC_MSG_RESULT([Win32, will enable support for it])
	AC_DEFINE(BUILD_WIN32)
	AC_DEFINE(WIN32)
	#WIN32_DEFINES="-D_WIN32_WINNT=Windows2000"
	#AC_SUBST(WIN32_DEFINES)
	build_linux="false"
	build_win32="true"
else
	if test `uname -s | tr -s 'LINUX' 'linux'` = "linux" -o "x$build_linux" = "xtrue" ; then
		AC_MSG_RESULT([Linux, will enable support for it])
		AC_DEFINE(BUILD_LINUX)
		build_linux="true"
		build_win32="false"
#	if uname -s | grep MINGW32 ; then
#	else
#		AC_MSG_ERROR([*** non usable found... Run ./configure --help to see a list of available platforms, you can also specify explicit, if your platform was not recognized properly. Otherwise your platform isn't supported yet. In this case please contact the maintainer (see README)])
	fi
fi

AM_CONDITIONAL(BUILD_WIN32, test "$build_win32" = "true")
AM_CONDITIONAL(BUILD_LINUX, test "$build_linux" = "true")


AH_TEMPLATE(ENABLE_DEBUG, [enable debugging])
AC_ARG_ENABLE(debug,
	[  --enable-debug		enable debugging], [ enable_debug=true ], [ enable_debug=false ])
AM_CONDITIONAL(DEBUG, test "$enable_debug" = "true")



HAVE_X="false"
AC_PATH_XTRA
gw_CHECK_QT
AH_TEMPLATE(HAVE_X11, [X11 build environment present])
AH_TEMPLATE(HAVE_XSHM, [MIT-SHM extension build environment present])
AH_TEMPLATE(HAVE_XTEST, [XTEST extension build environment present])
AH_TEMPLATE(HAVE_XTESTGRABCONTROL, [XTEST extension has XTestGrabControl])
AH_TEMPLATE(HAVE_XKEYBOARD, [XKEYBOARD extension build environment present])
AH_TEMPLATE(HAVE_LIBXINERAMA, [XINERAMA extension build environment present])
AH_TEMPLATE(HAVE_LIBXRANDR, [XRANDR extension build environment present])
AH_TEMPLATE(HAVE_LIBXFIXES, [XFIXES extension build environment present])
AH_TEMPLATE(HAVE_LIBXDAMAGE, [XDAMAGE extension build environment present])
AH_TEMPLATE(HAVE_LIBXTRAP, [DEC-XTRAP extension build environment present])
AH_TEMPLATE(HAVE_RECORD, [RECORD extension build environment present])
AH_TEMPLATE(HAVE_SOLARIS_XREADSCREEN, [Solaris XReadScreen available])
AH_TEMPLATE(HAVE_IRIX_XREADDISPLAY, [IRIX XReadDisplay available])
AH_TEMPLATE(HAVE_DPMS, [DPMS extension build environment present])
AH_TEMPLATE(HAVE_FBPM, [FBPM extension build environment present])
AH_TEMPLATE(HAVE_LINUX_VIDEODEV_H, [video4linux build environment present])
AH_TEMPLATE(HAVE_LINUX_FB_H, [linux fb device build environment present])
AH_TEMPLATE(HAVE_LINUX_INPUT_H, [linux/input.h present])
AH_TEMPLATE(HAVE_LINUX_UINPUT_H, [linux uinput device build environment present])
AH_TEMPLATE(HAVE_MACOSX_NATIVE_DISPLAY, [build MacOS X native display support])

AC_ARG_WITH(xkeyboard,
[  --without-xkeyboard     disable xkeyboard extension support],,)
AC_ARG_WITH(xinerama,
[  --without-xinerama      disable xinerama extension support],,)
AC_ARG_WITH(xrandr,
[  --without-xrandr        disable xrandr extension support],,)
AC_ARG_WITH(xfixes,
[  --without-xfixes        disable xfixes extension support],,)
AC_ARG_WITH(xdamage,
[  --without-xdamage       disable xdamage extension support],,)
AC_ARG_WITH(xtrap,
[  --without-xtrap         disable xtrap extension support],,)
AC_ARG_WITH(xrecord,
[  --without-xrecord       disable xrecord extension support],,)
AC_ARG_WITH(fbpm,
[  --without-fbpm          disable fbpm extension support],,)
AC_ARG_WITH(dpms,
[  --without-dpms          disable dpms extension support],,)
AC_ARG_WITH(v4l,
[  --without-v4l           disable video4linux support],,)
AC_ARG_WITH(fbdev,
[  --without-fbdev         disable linux fb device support],,)
AC_ARG_WITH(uinput,
[  --without-uinput        disable linux uinput device support],,)
AC_ARG_WITH(macosx-native,
[  --without-macosx-native disable MacOS X native display support],,)

if test "x$with_x" = "xno"; then
	HAVE_X="false"
elif test "$X_CFLAGS" != "-DX_DISPLAY_MISSING"; then
	AC_CHECK_LIB(X11, XGetImage, [AC_DEFINE(HAVE_X11) HAVE_X="true"],
		HAVE_X="false",
		$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)

	if test $HAVE_X = "true"; then
		X_PRELIBS="$X_PRELIBS -lXext"

		AC_CHECK_LIB(Xext, XShmGetImage, 
			[AC_DEFINE(HAVE_XSHM)], ,
			$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)

		AC_CHECK_LIB(Xext, XReadScreen, 
			[AC_DEFINE(HAVE_SOLARIS_XREADSCREEN)], ,
			$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)

		AC_CHECK_HEADER(X11/extensions/readdisplay.h,
			[AC_DEFINE(HAVE_IRIX_XREADDISPLAY)], ,
			[#include <X11/Xlib.h>])

		if test "x$with_fbpm" != "xno"; then
			AC_CHECK_LIB(Xext, FBPMForceLevel, 
				[AC_DEFINE(HAVE_FBPM)], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
		fi

		if test "x$with_dpms" != "xno"; then
			AC_CHECK_LIB(Xext, DPMSForceLevel, 
				[AC_DEFINE(HAVE_DPMS)], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
		fi

		AC_CHECK_LIB(Xtst, XTestGrabControl, 
			X_PRELIBS="-lXtst $X_PRELIBS"
			[AC_DEFINE(HAVE_XTESTGRABCONTROL) HAVE_XTESTGRABCONTROL="true"], ,
			$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)

		AC_CHECK_LIB(Xtst, XTestFakeKeyEvent, 
			X_PRELIBS="-lXtst $X_PRELIBS"
			[AC_DEFINE(HAVE_XTEST) HAVE_XTEST="true"], ,
			$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)

		if test "x$with_xrecord" != "xno"; then
			AC_CHECK_LIB(Xtst, XRecordEnableContextAsync, 
				X_PRELIBS="-lXtst $X_PRELIBS"
				[AC_DEFINE(HAVE_RECORD)], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
		fi

		# we use XTRAP on X11R5, or user can set X11VNC_USE_XTRAP
		if test "x$with_xtrap" != "xno"; then
		    if test ! -z "$X11VNC_USE_XTRAP" -o -z "$HAVE_XTESTGRABCONTROL"; then
			AC_CHECK_LIB(XTrap, XETrapSetGrabServer, 
				X_PRELIBS="$X_PRELIBS -lXTrap"
				[AC_DEFINE(HAVE_LIBXTRAP)], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
			# tru64 uses libXETrap.so
			AC_CHECK_LIB(XETrap, XETrapSetGrabServer, 
				X_PRELIBS="$X_PRELIBS -lXETrap"
				[AC_DEFINE(HAVE_LIBXTRAP)], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
		    fi
		fi

		if test "x$with_xkeyboard" != "xno"; then
			saved_CPPFLAGS="$CPPFLAGS"
			CPPFLAGS="$CPPFLAGS $X_CFLAGS"
			AC_CHECK_HEADER(X11/XKBlib.h, HAVE_XKBLIB_H="true",
				HAVE_XKBLIB_H="false", [#include <X11/Xlib.h>])
			CPPFLAGS="$saved_CPPFLAGS"
			if test $HAVE_XKBLIB_H = "true"; then
				AC_CHECK_LIB(X11, XkbSelectEvents,
					[AC_DEFINE(HAVE_XKEYBOARD)], ,
					$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
			fi
		fi

		if test "x$with_xinerama" != "xno"; then
			AC_CHECK_LIB(Xinerama, XineramaQueryScreens,
				X_PRELIBS="$X_PRELIBS -lXinerama"
				[AC_DEFINE(HAVE_LIBXINERAMA)], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
		fi

		if test "x$with_xrandr" != "xno"; then
			AC_CHECK_LIB(Xrandr, XRRSelectInput,
				X_PRELIBS="$X_PRELIBS -lXrandr"
				[AC_DEFINE(HAVE_LIBXRANDR)], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
		fi

		if test "x$with_xfixes" != "xno"; then
			AC_CHECK_LIB(Xfixes, XFixesGetCursorImage,
				X_PRELIBS="$X_PRELIBS -lXfixes"
				[AC_DEFINE(HAVE_LIBXFIXES) HAVE_LIBXFIXES="true"], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
		fi

		if test "x$with_xdamage" != "xno"; then
			AC_CHECK_LIB(Xdamage, XDamageQueryExtension,
				X_PRELIBS="$X_PRELIBS -lXdamage"
				[AC_DEFINE(HAVE_LIBXDAMAGE) HAVE_LIBXDAMAGE="true"], ,
				$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS)
		fi

		if test ! -z "$HAVE_LIBXFIXES" -o ! -z "$HAVE_LIBXDAMAGE"; then
			# need /usr/sfw/lib in RPATH for Solaris 10 and later
			case `(uname -sr) 2>/dev/null` in
			"SunOS 5"*) X_EXTRA_LIBS="$X_EXTRA_LIBS -R/usr/sfw/lib" ;;
			esac
		fi

		# currently only x11vnc uses crypt() or libssl:
		AH_TEMPLATE(HAVE_LIBCRYPT, [libcrypt library present])
		AC_ARG_WITH(crypt,
		[  --without-crypt         disable support for libcrypt],,)
		if test "x$with_crypt" != "xno"; then
			AC_CHECK_FUNCS([crypt], HAVE_LIBC_CRYPT="true")
			if test -z "$HAVE_LIBC_CRYPT"; then
				AC_CHECK_LIB(crypt, crypt,
					X_PRELIBS="$X_PRELIBS -lcrypt"
					[AC_DEFINE(HAVE_LIBCRYPT)], ,)
			fi
		fi

		# some OS's need both -lssl and -lcrypto on link line:
#		AH_TEMPLATE(HAVE_LIBCRYPTO, [openssl libcrypto library present])
#		AC_ARG_WITH(crypto,
#		[  --without-crypto        disable support for openssl libcrypto],,)
#
#		AH_TEMPLATE(HAVE_LIBSSL, [openssl libssl library present])
#		AC_ARG_WITH(ssl,
#		[  --without-ssl           disable support for openssl libssl],,)
#
#		if test "x$with_crypto" != "xno" -a "x$with_ssl" != "xno"; then
#			AC_CHECK_LIB(crypto, RAND_file_name,
#				[AC_DEFINE(HAVE_LIBCRYPTO) HAVE_LIBCRYPTO="true"], ,)
#		fi
#
#		if test "x$with_ssl" != "xno"; then
#			if test "x$HAVE_LIBCRYPTO" = "xtrue"; then
#				AC_CHECK_LIB(ssl, SSL_library_init,
#					X_PRELIBS="$X_PRELIBS -lssl -lcrypto"
#					[AC_DEFINE(HAVE_LIBSSL) HAVE_LIBSSL="true"], ,
#					-lcrypto)
#			else
#				AC_CHECK_LIB(ssl, SSL_library_init,
#					X_PRELIBS="$X_PRELIBS -lssl"
#					[AC_DEFINE(HAVE_LIBSSL) HAVE_LIBSSL="true"], ,)
#			fi
#		fi

		X_LIBS="$X_LIBS $X_PRELIBS -lX11 $X_EXTRA_LIBS"
	fi
fi

AC_SUBST(X_LIBS)
AM_CONDITIONAL(HAVE_X, test $HAVE_X != "false")

if test "$build_win32" != "true" -a "x$HAVE_X" = "xfalse" -a "x$with_x" != "xno"; then
	AC_MSG_ERROR([
==========================================================================
A working X window system build environment is required to build iTALC.
Make sure any required X development packages are installed.  If they are
installed in non-standard locations, one can use the --x-includes=DIR
and --x-libraries=DIR configure options or set the CPPFLAGS and LDFLAGS
environment variables to indicate where the X window system header files
and libraries may be found.  On 64+32 bit machines you may need to point
to lib64 or lib32 directories to pick up the correct word size.

If you want to build iTALC without X support (e.g. for -rawfb use only
or for native Mac OS X), specify the --without-x configure option.
==========================================================================
])
fi

if test "$build_win32" != "true" -a "x$HAVE_X" = "xtrue" -a "x$HAVE_XTEST" != "xtrue"; then
	AC_MSG_ERROR([
==========================================================================
A working build environment for the XTEST extension was not found (libXtst).
An iTALC built this way will be only barely usable.  You will be able to
move the mouse but not click or type.  There can also be deadlocks if an
application grabs the X server.

It is recommended that you install the necessary development packages
for XTEST (perhaps it is named something like libxtst-dev) and run
configure again.
==========================================================================
])
fi

if test "x$with_v4l" != "xno"; then
	AC_CHECK_HEADER(linux/videodev.h,
		[AC_DEFINE(HAVE_LINUX_VIDEODEV_H)],,)
fi

if test "x$with_fbdev" != "xno"; then
	AC_CHECK_HEADER(linux/fb.h,
		[AC_DEFINE(HAVE_LINUX_FB_H)],,)
fi

if test "x$with_uinput" != "xno"; then
	AC_CHECK_HEADER(linux/input.h,
		[AC_DEFINE(HAVE_LINUX_INPUT_H) HAVE_LINUX_INPUT_H="true"],,)
	if test "x$HAVE_LINUX_INPUT_H" = "xtrue"; then
		AC_CHECK_HEADER(linux/uinput.h,
			[AC_DEFINE(HAVE_LINUX_UINPUT_H)],, [#include <linux/input.h>])
	fi
fi

if test "x$with_macosx_native" != "xno"; then
	AC_DEFINE(HAVE_MACOSX_NATIVE_DISPLAY)
fi



#AH_TEMPLATE(HAVE_AVAHI, [Avahi/mDNS client build environment present])
#AC_ARG_WITH(avahi,
#[  --without-avahi         disable support for Avahi/mDNS]
#[  --with-avahi=DIR        use avahi include/library files in DIR],,)
#if test "x$with_avahi" != "xno"; then
#	printf "checking for avahi... "
#	if test ! -z "$with_avahi" -a "x$with_avahi" != "xyes"; then
#		AVAHI_CFLAGS="-I$with_avahi/include"
#		AVAHI_LIBS="-L$with_avahi/lib -lavahi-common -lavahi-client"
#		echo "using $with_avahi"
#		with_avahi=yes
#	elif pkg-config --atleast-version=0.6.4 avahi-client >/dev/null 2>&1; then
#		AVAHI_CFLAGS=`pkg-config --cflags avahi-client`
#		AVAHI_LIBS=`pkg-config --libs avahi-client`
#		with_avahi=yes
#		echo yes
#	else
#		with_avahi=no
#		echo no
#	fi
#fi
#if test "x$with_avahi" = "xyes"; then
#	AC_DEFINE(HAVE_AVAHI)
#	AC_SUBST(AVAHI_CFLAGS)
#	AC_SUBST(AVAHI_LIBS)
#fi



# Checks for libraries and header files
AH_TEMPLATE(HAVE_ZLIB_H, [Define to 1 if you have zlib.h header file.])
AH_TEMPLATE(HAVE_JPEGLIB_H, [Define to 1 if you have jpeglib.h header file.])
AH_TEMPLATE(HAVE_DSA_H, [Define to 1 if you have the openssl/dsa.h header file.])
AH_TEMPLATE(HAVE_LIBZ, [libz present])
AH_TEMPLATE(HAVE_LIBJPEG, [libjpeg present])
AH_TEMPLATE(HAVE_LIBSSL, [openssl libssl present])

AC_CHECK_HEADER(zlib.h, HAVE_ZLIB_H="true")
AC_CHECK_HEADER(jpeglib.h, HAVE_JPEGLIB_H="true")
AC_CHECK_HEADER(openssl/dsa.h, HAVE_DSA_H="true")


AC_CHECK_LIB(z, deflate, HAVE_LIBZ="true", HAVE_ZLIB_H="")
AC_CHECK_LIB(jpeg, jpeg_CreateCompress, HAVE_LIBJPEG="true", HAVE_JPEGLIB_H="")
AC_CHECK_LIB(ssl, SSL_library_init, HAVE_LIBSSL="true")
AC_CHECK_LIB(crypto, RAND_file_name, HAVE_LIBCRYPTO="true")
AC_CHECK_LIB(eay32, DSA_new, HAVE_LIBEAY32="true")
if test \( -z "$HAVE_LIBSSL" -o -z "$HAVE_LIBCRYPTO" \) -a \( -z "$HAVE_LIBEAY32" \) ; then
	HAVE_DSA_H=""
fi


if test -z "$HAVE_ZLIB_H" ; then
	AC_MSG_ERROR([*** you do not have installed libz and/or development-files are missing!])
fi

if test -z "$HAVE_JPEGLIB_H" ; then
	AC_MSG_ERROR([*** you do not have installed libjpeg and/or development-files are missing!])
fi

if test -z "$HAVE_DSA_H" ; then
	AC_MSG_ERROR([*** you do not have installed the OpenSSL-library and/or development-files are missing!])
fi

AC_DEFINE(HAVE_LIBZ)
AC_DEFINE(HAVE_ZLIB_H)
AC_DEFINE(HAVE_LIBJPEG)
AC_DEFINE(HAVE_JPEGLIB_H)
AC_DEFINE(HAVE_LIBSSL)
AC_DEFINE(HAVE_DSA_H)

AC_ARG_WITH(pthread,
[  --without-pthread       disable support for libpthread],,)

if test "x$with_pthread" != "xno"; then
	AC_CHECK_HEADER(pthread.h, HAVE_PTHREAD_H="true")
	if test ! -z "$HAVE_PTHREAD_H"; then
		AC_CHECK_LIB(pthread, pthread_mutex_lock)
		AC_CHECK_LIB(pthread, pthread_mutex_lock, HAVE_LIBPTHREAD="true")
	fi
fi


AM_CONDITIONAL(HAVE_LIBZ, test ! -z "$HAVE_ZLIB_H")
AM_CONDITIONAL(HAVE_LIBJPEG, test ! -z "$HAVE_LIBJPEG")
AM_CONDITIONAL(HAVE_LIBSSL, test -n "$HAVE_LIBSSL" -a -n "$HAVE_LIBCRYPTO")
AM_CONDITIONAL(HAVE_LIBEAY32, test ! -z "$HAVE_LIBEAY32")
AM_CONDITIONAL(HAVE_LIBPTHREAD, test ! -z "$HAVE_LIBPTHREAD")



# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h memory.h netdb.h netinet/in.h stdint.h stdlib.h string.h sys/ioctl.h sys/socket.h sys/time.h sys/timeb.h syslog.h unistd.h pwd.h sys/types.h utmpx.h sys/wait.h time.h errno.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_C_BIGENDIAN
AC_CHECK_TYPE(ptrdiff_t,long)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(__int64)
AC_CHECK_SIZEOF(void *)
AC_CHECK_SIZEOF(size_t)
AC_CHECK_SIZEOF(ptrdiff_t)
AC_TYPE_SIZE_T
AC_HEADER_SYS_WAIT
AC_TYPE_SOCKLEN_T
AC_HEADER_TIME
AC_TYPE_OFF_T
AC_CREATE_STDINT_H(common/include/rfb/rfbint.h)
AC_CACHE_CHECK([for in_addr_t],
        inaddrt, [
                AC_TRY_COMPILE([#include <sys/types.h>
#include <netinet/in.h>],
                        [in_addr_t foo; return 0;],
                                        [inaddrt=yes],
                                        [inaddrt=no]),
        ])
AH_TEMPLATE(NEED_INADDR_T, [Need a typedef for in_addr_t])
if test $inaddrt = no ; then
  AC_DEFINE(NEED_INADDR_T)
fi


# Checks for library functions.
AC_FUNC_MEMCMP
AC_FUNC_STAT
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF
AC_FUNC_FORK

AC_CHECK_LIB(nsl,gethostbyname)
AC_CHECK_LIB(socket,socket)
AC_CHECK_FUNCS([ftime mkfifo dup2 floor gethostbyname gethostname gettimeofday inet_ntoa memcmp memmove memcpy memset mmap pow putenv select socket strchr strdup strerror strpbrk strrchr strstr uname setsid getpwuid getpwnam getuid geteuid waitpid setutxent setpgrp seteuid grantpt getspnam])

# check, if shmget is in cygipc.a
AC_CHECK_LIB(cygipc,shmget)
AM_CONDITIONAL(CYGIPC, test "$HAVE_CYGIPC" = "true")

# Check if /dev/vcsa1 exists, if so, define LINUX
AM_CONDITIONAL(LINUX, test -c /dev/vcsa1)

# Check for OS X specific header
AC_CHECK_HEADER(ApplicationServices/ApplicationServices.h, HAVE_OSX="true")
AM_CONDITIONAL(OSX, test "$HAVE_OSX" = "true")

# Check for OS X specific header
AC_CHECK_HEADER(ApplicationServices/ApplicationServices.h, HAVE_OSX="true")
AM_CONDITIONAL(OSX, test "$HAVE_OSX" = "true")

# On Solaris 2.7, write() returns ENOENT when it really means EAGAIN
AH_TEMPLATE(ENOENT_WORKAROUND, [work around when write() returns ENOENT but does not mean it])
case `(uname -sr) 2>/dev/null` in
    "SunOS 5.7")
	AC_DEFINE(ENOENT_WORKAROUND)
    ;;
esac

uname_s=`(uname -s) 2>/dev/null`
if test "x$uname_s" = "xHP-UX"; then
	# need -lsec for getspnam()
	LDFLAGS="$LDFLAGS -lsec"
fi

# Check for rpm SOURCES path
echo -n "checking for rpm sources path... "
RPMSOURCEDIR="NOT-FOUND"
for directory in packages OpenLinux redhat RedHat rpm RPM "" ; do
	if test -d /usr/src/${directory}/SOURCES; then
		RPMSOURCEDIR="/usr/src/${directory}/SOURCES/"
	fi
done
echo "$RPMSOURCEDIR"
AM_CONDITIONAL(HAVE_RPM, test "$RPMSOURCEDIR" != "NOT-FOUND")
AC_SUBST(RPMSOURCEDIR)

docdir="$datadir/$PACKAGE/doc"
AC_SUBST(docdir)

#AC_CONFIG_SUBDIRS(lupus)

AC_CONFIG_FILES([Makefile
		 italc.spec
		 common/Makefile
		 ica/Makefile
		 ima/Makefile
		 ima/data/italc
		 ima/data/italc.desktop
		 setup/Makefile
		 utils-win32/Makefile
		 ica/ica.rc
		 ima/italc.rc
		 setup/setup.rc
		 ])
AC_OUTPUT

echo
echo
echo " ============================="
echo " ===  iTALC - INFORMATION  ==================================================="
echo " ============================="
echo " ="
echo " = iTALC was configured successfully! Now try to build it by typing"
echo " = 'make' and wait until it is finished."
echo " = Then either install iTALC by typing 'make install' or copy the binaries by"
echo " = hand as described in INSTALL."
echo " ="
echo " = If there're any problems, please contact an iTALC-developer (see AUTHORS)"
echo " ="
echo

